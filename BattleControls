package Pokemon;

import java.util.Random;



public class BattleControls  extends Controller { 

	private boolean acabouBatalha = false;
	
	public BattleControls(){
		addAction1(new Restart1());
		addAction2(new Restart2());
		
	}
	
private class Atacar extends Action { 
	public Atacar() { 
		super(3); 
	}
	//Random acerto = new Random();
	private int CalculaDano (int power, int atkpower, int defpower /*, int accuracy*/)
	{
		float dano = 0;
		/*if(acerto.nextInt(100) + 1 <= accuracy)*/
			dano = (42 * power * atkpower + 100)/(defpower*50);
		return (int) dano;
	}
	public void action(Player faz, Player recebe) { 
		//Random golpeador = new Random();
		//int x = golpeador.nextInt(2); //AJUSTAR PARA 4 QUANDO TODOS OS POKEMONS TIVEREM 4 ATAQUES!
		//							int power, int atkpower, int defpower
		int dano = CalculaDano (faz.RetornarPokemonAtivo().RetornarMovementPokemon(faz.RetornarPokemonAtivo().RetornaIndiceAtqAtual()).RetornaMovePower(), faz.RetornarPokemonAtivo().RetornaAtkPower(), recebe.RetornarPokemonAtivo().RetornaDefPower() /*,pokeUser.accuracy*/);
		recebe.RetornarPokemonAtivo().MudaVida(-dano);
		System.out.println(faz.GetPlayerName() + "'s " +faz.RetornarPokemonAtivo().GetPokeName() + " used " + faz.RetornarPokemonAtivo().RetornarMovementPokemon(faz.RetornarPokemonAtivo().RetornaIndiceAtqAtual()).GetMoveName() + "!");
		System.out.println("It deals " +dano + " damage!" );
		if(recebe.RetornarPokemonAtivo().RetornaVida() == 0) {
			System.out.println(recebe.RetornarPokemonAtivo().GetPokeName() +" has fainted!");
			
		}
		faz.RetornarPokemonAtivo().GiraAtaque();
		
	}
	
	public String description() { 
		return "";
	} 
} 

private class UsarItem extends Action { 
	public UsarItem() { 
		super(2); 
	}
	public void action(Player faz, Player recebe) { 
		faz.RetornarPokemonAtivo().MudaVida(20);
		System.out.println(faz.GetPlayerName() + " used a healing potion on " + faz.RetornarPokemonAtivo().GetPokeName() + " !");
		System.out.println("It heals its HP to " +faz.RetornarPokemonAtivo().RetornaVida() + " HP!");
		
	} 
	public String description() { 
		return "";
		//return user.name +" used Super Potion on " + pokeUser.name +"! It heals 40 HP!";
	}
}

private class TrocarPokemon extends Action { 
	public boolean possivelTrocar = true;
	public TrocarPokemon() { 
		super(1);
	}
	public void action(Player faz, Player recebe) {
		int i = faz.getPokeAtivo() + 1; //Vai para pokemon seguinte na party
		while (faz.RetornarPokemonGuardado(i).RetornaVida() <= 0) //verifica se pokemon escolhido tem vida para entrar em batalha
		{
			i++;
			if (i == 6)
				i = 0;
			if (i == faz.getPokeAtivo()) //todos os pokemons foram avaliados e nao foi possivel trocar
				possivelTrocar = false;
		}
		if (possivelTrocar)
		{
			int pokeAntigo = faz.getPokeAtivo();
			faz.setPokeAtivo(i);
			System.out.println(faz.GetPlayerName() +" took " +faz.RetornarPokemonGuardado(pokeAntigo).GetPokeName() + " out of battle and sent out " +faz.RetornarPokemonAtivo().GetPokeName() +".");
		}
		else
			System.out.println("You don't have any other healthy Pokémon! Stick to " +faz.RetornarPokemonAtivo().GetPokeName() +"!");
	} 
	public String description() { 
		return "";
		//return user.name +" took out " + pokeUser.name +"and sent out "+ pokeUser.name +".;
	} 
} 

private class Fugir extends Action { 
	public Fugir() { 
		super(0); 
	} 
	public void action(Player faz, Player recebe) { 
		System.out.println(faz.GetPlayerName() +" is a coward and has fled the battle! Shame!" );
		acabouBatalha = true;
	} 
	public String description() { 
		return "";
		//return user.name " fled! Such a coward! SHAME!";
	} 	
} 

private class Restart1 extends Action { 
	public Restart1() { 
		super(100); 
	} 
	public void action(Player faz, Player recebe) {
		Random DecideAcao = new Random();
		int numAcao = DecideAcao.nextInt(100) + 1;
		if (numAcao > 98) //2% de chance de Fugir
			addAction1 (new Fugir());
		else if (numAcao > 83) //15% de chance de usar poção
			addAction1 (new UsarItem());
		else if (numAcao > 73) //10% de chance de trocar Pokémon
			addAction1 (new TrocarPokemon());
		else {
			addAction1 (new Atacar()); //73% de chance de atacar
		}
		addAction1 (new Restart1()); 
	} 
	
	public String description() { 
		return ""; 
	} 
} 

private class Restart2 extends Action { 
	public Restart2() { 
		super(100); 
	} 
	public void action(Player faz, Player recebe) {  
		Random DecideAcao = new Random();
		int numAcao = DecideAcao.nextInt(100) + 1;
		if (numAcao > 100) //2% de chance de Fugir
			addAction2 (new Fugir());
		else if (numAcao > 80) //18% de chance de usar poção
			addAction2 (new UsarItem());
		else if (numAcao > 70) //10% de chance de trocar Pokémon
			addAction2 (new TrocarPokemon());
		else {
			addAction2 (new Atacar()); //69% de chance de atacar
		} 
		addAction2(new Restart2()); 
	} 
	public String description() { 
		return ""; 
	}
}

	public boolean fimDeBatalha(Player P) {
		int i = 0, j = 0;
		for (i = 0; i < P.RetornaTamanhoParty(); i++)
		{
			if (P.RetornarPokemonGuardado(i).RetornaVida() <= 0)
				j++;
		}
		if (j == 6) 
			this.acabouBatalha = true;
		return acabouBatalha;
	}

	public int prioridade(Action a, Action b) {
		return a.getPriority() - b.getPriority();
	}

	public int prioridade(Move a, Move b) {
		return a.GetAtkPriority() - b.GetAtkPriority();
	}
	
	public void batalha(Player P1, Player P2) { 
		int turno = 0;
		System.out.println("A new battle starts!");
		System.out.println(P1.GetPlayerName() +" Sends out " +P1.RetornarPokemonAtivo().GetPokeName() + "!");
		System.out.println(P2.GetPlayerName() +" Sends out " +P2.RetornarPokemonAtivo().GetPokeName() + "!");
		while(!fimDeBatalha(P1) && !fimDeBatalha(P2))
		{
			turno++;
			if(turno%2 == 0) System.out.println("________TURN " +turno/2 + "_______");
			Action acao1 = es1.getNext();
			Action acao2 = es2.getNext();
			
			int p = prioridade (acao1, acao2);
			if (p < 0){ // Prioridade acao1 - prioridade acao2
				run(P1, P2, acao1);
				if(!fimDeBatalha(P2)) //acao2;
					run(P2, P1, acao2);
			}
			
			else if (p > 0)
			{
				run(P2, P1, acao2);
				if(!fimDeBatalha(P1))
					run(P1, P2, acao1);
			}
			else
			{
				if (acao1.getPriority() == 3) //acao == ataque
					if(prioridade(P1.RetornarPokemonAtivo().RetornarMovementPokemon(P1.RetornarPokemonAtivo().RetornaIndiceAtqAtual()), P2.RetornarPokemonAtivo().RetornarMovementPokemon(P2.RetornarPokemonAtivo().RetornaIndiceAtqAtual())) <= 0){
						run(P1, P2, acao1);
						if(!fimDeBatalha(P2))
							run(P2, P1, acao2);
					}
					else
					{
						run(P2, P1, acao2);
						if(!fimDeBatalha(P1))
							run(P1, P2, acao1);
					}
				else{
					run(P1, P2, acao1);
					if(!fimDeBatalha(P2))
						run(P2, P1, acao2);
				}
			}
			es1.removeCurrent();
			es2.removeCurrent();
		}
		
	}  

	public static void main(String[] args) {
		Player P1 = new Player("Crush Master", 6);
		Player P2 = new Player("Lucas Paiva", 6);
		BattleControls b = new BattleControls();
		//b.addAction(b.new Restart1());
		//b.run(P1, P2, );
		b.batalha(P1, P2);
	}
} 


/*						TO DO: 
//	Linha 39 	Trocar pokemon se faint
//	(solved)	Lista de acoes (random)
//	(unsolved)  Lista de acoes (definidas)	
//	(solved)	Bug em es1 - loop infinito, funcao se referencia infinitamente --- WHY?
*/
